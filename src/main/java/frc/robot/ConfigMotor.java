package frc.robot;

import com.ctre.phoenix6.configs.Slot0Configs;
import com.ctre.phoenix6.configs.TalonFXConfiguration;

public class ConfigMotor {
    private TalonFXConfiguration _config = new TalonFXConfiguration();

    /**
     * configs for the PID 
     * @param kP
     * erm P is proportional to the current value of the SP − PV error e(t).
     * For example, if the error is large, the control output will be proportionately large by using the gain factor "Kp".
     * Using proportional control alone will result in an error between the set point and the process value because the controller requires an error to generate the proportional output response.}
     * In steady state process conditions an equilibrium is reached, with a steady SP-PV "offset".
     * @param kI
     *  Term I accounts for past values of the SP − PV error and integrates them over time to produce the I term. For example,
     *  if there is a residual SP − PV error after the application of proportional control,
     *  the integral term seeks to eliminate the residual error by adding a control effect due to the historic cumulative value of the error.
     *  When the error is eliminated, the integral term will cease to grow.
     *  This will result in the proportional effect diminishing as the error decreases, but this is compensated for by the growing integral effect.
     * @param kD 
     * Term D is a best estimate of the future trend of the SP − PV error, based on its current rate of change.
     *  It is sometimes called "anticipatory control",
     *  as it is effectively seeking to reduce the effect of the SP − PV error by exerting a control influence generated by the rate of error change.
     *  The more rapid the change, the greater the controlling or damping effect.
     */
    public void PIDConfig(double kP, double kI, double kD){
         Slot0Configs Slot0 = _config.Slot0;

         Slot0.kP = kP;
         Slot0.kI = kI;
         Slot0.kD = kD;
    }

    /**
     * configs for feedfoword 
     * @param kS overcome static forces
     * @param kV controlling the velocity 
     * @param kA controlling the acceleration
     */
    public void FF(double kS, double kV, double kA){
        Slot0Configs Slot0 = _config.Slot0;

        Slot0.kS = kS;
        Slot0.kV = kV;
        Slot0.kA = kA;
    }

    public void MM(){
        
    }

    
    
}
